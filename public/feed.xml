<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Francis Wang's blog</title>
    <description></description>
    <link>http://frankwang.cn/</link>
    <atom:link href="http://frankwang.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 08 Aug 2021 14:22:56 +0800</pubDate>
    <lastBuildDate>Sun, 08 Aug 2021 14:22:56 +0800</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>k8s 自制手册</title>
        <description>&lt;h1 id=&quot;k8s-自制手册&quot;&gt;k8s 自制手册&lt;/h1&gt;
&lt;p&gt;记录在阿里云上手动拉起三节点 k8s 的步骤&lt;/p&gt;

&lt;h1 id=&quot;常用命令&quot;&gt;常用命令&lt;/h1&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pod &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system
kubectl get pod &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; calico-system &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide
kubectl get pod &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide
kubectl get nodes &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide

&lt;span class=&quot;c&quot;&gt;#  dashboard&lt;/span&gt;
kubectl &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubernetes-dashboard get pod &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;dashboard

&lt;span class=&quot;c&quot;&gt;# delete node on control-panal&lt;/span&gt;
kubectl drain &amp;lt;node name&amp;gt; &lt;span class=&quot;nt&quot;&gt;--delete-local-data&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ignore-daemonsets&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sudo rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /etc/kubernetes/

用 pod 运行一个shell
kubectl run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; busybox &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;busybox &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;安装-k8s-集群&quot;&gt;安装 k8s 集群&lt;/h1&gt;

&lt;h2 id=&quot;设置阿里云景象&quot;&gt;设置阿里云景象&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; apt-transport-https curl
curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;/etc/apt/sources.list.d/kubernetes.list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装kube工具&quot;&gt;安装kube工具&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; kubelet kubeadm kubectl
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-mark hold kubelet kubeadm kubectl

kubeadm config images pull &lt;span class=&quot;nt&quot;&gt;--image-repository&lt;/span&gt; registry.aliyuncs.com/google_containers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装-master&quot;&gt;安装 master&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;kubeadm init &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--kubernetes-version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;v1.21.2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--image-repository&lt;/span&gt; registry.aliyuncs.com/google_containers  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--pod-network-cidr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.0/16 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6
&lt;span class=&quot;nt&quot;&gt;--ignore-preflight-errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;all &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 因 registry.aliyuncs.com/google_containers 为阿里云三方用户维护，同步慢，有时无法获得对应版本，需要从docker hub 拉取，并重新 tag.
docker pull coredns/coredns:1.8.0
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker tag 296a6d5035e2 registry.aliyuncs.com/google_containers/coredns:v1.8.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装网络插件&quot;&gt;安装网络插件&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Calico 性能好, 但阿里云只能使用 IPIP 模式，与 flannel 模式一致。建议直接使用Flannel 
一定要先配置网络，再加入节点！！！一定要先配置网络，再加入节点！！！一定要先配置网络，再加入节点！！！
一定要关闭 NetworkManager ！！！https://docs.projectcalico.org/maintenance/troubleshoot/troubleshooting#configure-networkmanager&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;安装-calico-未成功阿里云上因网络不支持calico-安装失败&quot;&gt;安装 calico [未成功，阿里云上因网络不支持，calico 安装失败]&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl https://docs.projectcalico.org/manifests/calico.yaml &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt;
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; calico.yaml
&lt;span class=&quot;c&quot;&gt;# 如果 pod network 非 192.168.0.0/16 需要先下载 yaml ，手动配置后启动&lt;/span&gt;
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://docs.projectcalico.org/manifests/custom-resources.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装-flannel-阿里云可用&quot;&gt;安装 Flannel 【阿里云可用】&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;span class=&quot;c&quot;&gt;#如果yml中的&quot;Network&quot;: &quot;10.244.0.0/16&quot;和kubeadm init xxx --pod-network-cidr不一样，就需要修改成一样的。不然可能会使得Node间Cluster IP不通。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装-kube-dashboard&quot;&gt;安装 kube-dashboard&lt;/h3&gt;
&lt;p&gt;Master 节点运行：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl proxy 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从笔记本访问：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; localhost:8001:localhost:8001 &lt;span class=&quot;nt&quot;&gt;-NT&lt;/span&gt; root@xcode-build.frankwang.cn &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ~/.ssh/xcode-build-env@aliyun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;获取-token&quot;&gt;获取 Token&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system get secret|grep admin-token
kubectl &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system describe secret admin-token-vtg87
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;三节点时允许 master 运行 Pod, 有安全风险仅可用于开发，测试环境&lt;/p&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl taint nodes &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; node-role.kubernetes.io/master-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;elk-安装-tips&quot;&gt;ELK 安装 Tips&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;需要在每一台机器上安装 nfs-common 工具: apt-get install nfs-common&lt;/li&gt;
  &lt;li&gt;需要设置每一台机器 sysctl -w vm.max_map_count=262144&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;获取账号--k&quot;&gt;获取账号  k&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;kubectl get secret quickstart-es-elastic-user &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jsonpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{.data.elastic}'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decode&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PASSWORD&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/xiao987334176/p/11317844.html&quot;&gt;K8s 安装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000023130407&quot;&gt;Dashboard 安装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.toutiao.com/c/user/token/MS4wLjABAAAA0YFomuMNm87NNysXeUsQdI0Tt3gOgz8WG_0B3MzxsmI/?is_new_connect=0&amp;amp;is_new_user=0&amp;amp;tab=article&quot;&gt;K8s 搭建step by step&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yanqiw/k8s-study-yaml&quot;&gt;k8s 基础组建相关部署 YAML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 01 Aug 2021 17:32:00 +0800</pubDate>
        <link>http://frankwang.cn/post/2021/08/01/k8s-cookbook.html</link>
        <guid isPermaLink="true">http://frankwang.cn/post/2021/08/01/k8s-cookbook.html</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>阿里函数计算实现简单React Native热更新后台</title>
        <description>&lt;h1 id=&quot;阿里函数计算实现简单react-native热更新后台&quot;&gt;阿里函数计算实现简单React Native热更新后台&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函数计算&lt;/code&gt;作为云计算中新一代的计算单元，有着不需要管理服务器设施和更精准的计费方式的优势。它依托于云服务商的多种云资源（对象存储，日志服务等），将需要计算的业务逻辑浓缩在一个函数中，并协调多种其他云资源。收费方式也采用按调用次数和运行时间为计费单位，使得计算资源的计费更精准。对用户来说，在保证业务正常运转的前提下，节省下不少业务闲时的服务器成本。&lt;/p&gt;

&lt;p&gt;2014年AWS发布Lambda函数计算服务，经过几年的发展&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函数计算&lt;/code&gt;也越来越受到开发者的关注。 
2017年，阿里云发布自己的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函数计算&lt;/code&gt;服务&lt;/p&gt;

&lt;p&gt;本文记录基于阿里云&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函数计算&lt;/code&gt;服务，简单实现app热更新后端。&lt;/p&gt;

&lt;h1 id=&quot;为什么使用函数计算&quot;&gt;为什么使用函数计算&lt;/h1&gt;
&lt;p&gt;阿里云的官方文档中介绍了几种函数计算适用的场景：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;媒资内容分析处理&lt;/strong&gt;：通过对象存储上传事件可以触发多个函数，完成转码、元数据抽取等功能。通过事件触发机制，您能够快速整合不同服务，构建一个弹性、高可用的视频后端系统。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Severless后端服务&lt;/strong&gt;：可以使用 函数计算和 API网关 构建后端，以验证和处理 API 请求。采用函数服务构建灵活拓展架构,轻松创造丰富、个性化的应用程序体验。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IoT消息实时处理&lt;/strong&gt;：您可以使用函数计算高效的处理实时流数据。例如，实时过滤、聚合、分析IoT设备产生的数据，并将产生的结构化数据保存到数据库中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看出，函数计算主要应用在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;事件出发-&amp;gt;简单处理数据-&amp;gt;存入数据库或对象存储&lt;/code&gt;场景下。&lt;/p&gt;

&lt;p&gt;这个场景也刚好适用于APP热更新的后端的几个核心业务：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;上传新代码：上传代码到OSS事件-&amp;gt;分析代码-&amp;gt;更新最新版本信息&lt;/li&gt;
  &lt;li&gt;发布最新代码：发布事件-&amp;gt;查询要发布代码-&amp;gt;发布代码到环境&lt;/li&gt;
  &lt;li&gt;APP查询更新：最新版本查询事件-&amp;gt;比对app版本与最新版本-&amp;gt;返回结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从费用方面考虑，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函数计算&lt;/code&gt;现在的免费配额基本可以满是日常试用，所以决定用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函数计算&lt;/code&gt;来支撑热更新服务。&lt;/p&gt;

&lt;h1 id=&quot;架构总览&quot;&gt;架构总览&lt;/h1&gt;
&lt;p&gt;使用函数计算，主要是通过云上的资源来触发函数，然后由函数处理数据，并调度其他云资源。
&lt;strong&gt;热更新服务架构图&lt;/strong&gt;
&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fo80xlccycj30vp0dmmz9.jpg&quot; alt=&quot;架构纵览&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;基本组件&quot;&gt;基本组件&lt;/h2&gt;
&lt;p&gt;在热更新业务中，主要涉及了以下几个组件。&lt;/p&gt;

&lt;h3 id=&quot;函数计算&quot;&gt;函数计算&lt;/h3&gt;
&lt;p&gt;函数计算作为承载业务的应用层，替代了传统使用ECS服务搭建的应用服务器。&lt;/p&gt;

&lt;h3 id=&quot;对象存储&quot;&gt;对象存储&lt;/h3&gt;
&lt;p&gt;对象存储用来做简单的数据持久化和存储热更新包。&lt;/p&gt;

&lt;h3 id=&quot;日志服务&quot;&gt;日志服务&lt;/h3&gt;
&lt;p&gt;日志在函数计算中很重要。因为函数容器在运行结束后立即被销毁，运行过程中的日志也会随着容器同事销毁。只有在函数运行时将日志输出到日志服务，才能在之后查询到函数的运行记录。也因为如此，在函数调试时，我们更需要日志服务来查看函数的运行状况。&lt;/p&gt;

&lt;h3 id=&quot;api网关&quot;&gt;API网关&lt;/h3&gt;
&lt;p&gt;API网关为函数计算提供了对外提供Web API接口的能力，同时也提供了身份认证和授权两大重要功能。在API网关中，用户可以定义提供的接口签名，并授权给特定的用户使用Web API。&lt;/p&gt;

&lt;h2 id=&quot;业务流&quot;&gt;业务流&lt;/h2&gt;
&lt;h3 id=&quot;上传代码&quot;&gt;上传代码&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;用户通过OSS命令行或OSS控制台直接上传代码到指定目录&lt;/li&gt;
  &lt;li&gt;OSS触发函数计算执行相应业务&lt;/li&gt;
  &lt;li&gt;函数计算将结果保存回OSS指定目录&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;检查更新&quot;&gt;检查更新&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;APP客户端访问API网关提供的API&lt;/li&gt;
  &lt;li&gt;API网关调用函数计算检查版本&lt;/li&gt;
  &lt;li&gt;API网关将函数计算结果返回给客户端&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;基本概念&quot;&gt;基本概念&lt;/h1&gt;
&lt;p&gt;函数计算有几个主要的概念，在开始前需要了解。&lt;/p&gt;

&lt;h2 id=&quot;角色和授权&quot;&gt;角色和授权&lt;/h2&gt;
&lt;p&gt;函数计算本身只处理业务逻辑，当函数计算需要与阿里云上其他资源交互的时候，就需要利用阿里云的RAM(访问控制)系统来给函数一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;角色和授权&lt;/code&gt;来和其他云资源交互。函数在运行时，可以通过默认传入函数的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;变量获取角色的凭证，并扮演该角色与已授权的云资源进行交互。&lt;/p&gt;

&lt;p&gt;关于如何为函数服务创建角色的详细内容可以参考&lt;a href=&quot;https://help.aliyun.com/document_detail/60247.html&quot;&gt;应用示例2 - 授权函数访问其他云服务资源&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;触发器和事件&quot;&gt;触发器和事件&lt;/h2&gt;
&lt;p&gt;事件是当其他云资源需要触发函数计算处理时，发送给函数计算服务的一段包含特定事件详情的信息。其他云资源可以定义什么时候触发事件（即定义触发器），不同资源，触发事件后发送给函数计算的事件详情不同。&lt;/p&gt;

&lt;p&gt;注：目前阿里云上只有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AIP网关&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSS对象存储&lt;/code&gt;支持创建触发器。&lt;/p&gt;

&lt;p&gt;更多细节可参考&lt;a href=&quot;https://help.aliyun.com/document_detail/53097.html&quot;&gt;应用示例4 - 触发器管理&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;服务&quot;&gt;服务&lt;/h2&gt;
&lt;p&gt;服务是管理函数的最小单位，每个函数都只属于一个服务。 服务中可以定义函数可以使用的’角色’和日志输出的仓库，所有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函数&lt;/code&gt;共享所属&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;服务&lt;/code&gt;的这些设定。&lt;/p&gt;

&lt;h2 id=&quot;函数&quot;&gt;函数&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函数&lt;/code&gt;是运行代码的容器。用户自己编写需要处理的业务，并放在相应语言的函数容器中运行。&lt;/p&gt;

&lt;p&gt;注：目前阿里云支持&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodejs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;实现步骤&quot;&gt;实现步骤&lt;/h1&gt;
&lt;p&gt;简单介绍，搭建热更新后端的步骤。&lt;/p&gt;
&lt;h2 id=&quot;工具&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;用户可以在阿里云控制台中操作创建&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;服务&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;函数&lt;/code&gt;，更方便的做法是使用行数计算命令行工具&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fcli&lt;/code&gt;进行创建。在下面的步骤中，采用fcli的方式介绍。
&lt;a href=&quot;https://help.aliyun.com/document_detail/52995.html&quot;&gt;fcli下载及文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;初次使用fcli需要使用阿里云账号登陆。 注：如果使用子账号登陆，子账号需要有操作RAM和函数计算的授权。
运行：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fcli shell

Please input the endpoint &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;example: https://account_id.cn-shanghai.fc.aliyuncs.com&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ENDPOINT]
Please input the access key &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FAKE_ACCESS_KEY_ID]
Please input the access key secret:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FAKE_ACCESS_KEY_SECRET]
Store the configuration &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;: /Users/testuser/.fcli
Welcome to the &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;compute world. Have fun!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;获取endpoint，请参考&lt;a href=&quot;https://help.aliyun.com/document_detail/52984.html&quot;&gt;服务入口文档&lt;/a&gt;。
获取access key id/secret，请参考&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/38738.html&quot;&gt;相关文档&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;创建角色授权&quot;&gt;创建角色授权&lt;/h2&gt;
&lt;p&gt;当函数计算和其他云资源有交互的时候，需要创建两种角色授权，一种是授权给其他云资源使用触发函数计算的角色， 另一种是授权给函数计算使用云资源的角色。&lt;/p&gt;

&lt;h3 id=&quot;触发函数计算&quot;&gt;触发函数计算&lt;/h3&gt;
&lt;p&gt;创建触发函数计算角色，用来授权给其他云资源调用函数计算服务。 例如，授权api网关调用函数计算，或对象存储服务触发函数计算。&lt;/p&gt;

&lt;p&gt;运行：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkir fc-invoke-function
mkrp fc-invoke-all &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;fc:InvokeFunction&quot;'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;*&quot;'&lt;/span&gt;
attach &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /ram/policies/fc-invoke-all &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /ram/roles/fc-invoke-function
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;对象存储及日志服务读写&quot;&gt;对象存储及日志服务读写&lt;/h3&gt;
&lt;p&gt;创建其他云资源调用角色，用来让函数计算服务可以访问&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;日志服务&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSS对象存储&lt;/code&gt;服务。&lt;/p&gt;

&lt;p&gt;运行：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mksr fc-oss-log-op
mkrp fc-oss-log-gp &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[&quot;oss:GetObject&quot;, &quot;oss:PutObject&quot;, &quot;log:PostLogStoreLogs&quot;, &quot;log:GetLogStore&quot;]'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;*&quot;'&lt;/span&gt;
attach &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /ram/policies/fc-oss-log-gp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /ram/roles/fc-oss-log-op
mks oss_demo &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; acs:ram::[ALIYUN ACCOUNT &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:role/fc-oss-log-op
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;注：这里为了演示方便，并没有限制具体可操作资源，用户需要更具具体情况合理的限制可操作资源。&lt;/p&gt;

&lt;h2 id=&quot;创建日志库&quot;&gt;创建日志库&lt;/h2&gt;
&lt;p&gt;创建日志库来，用来收集函数日志。 具体步骤可以参考&lt;a href=&quot;https://help.aliyun.com/document_detail/61023.html&quot;&gt;函数访问日志服务&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里创建一个日志项目名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fc-beijing&lt;/code&gt;， 仓库名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotpatch&lt;/code&gt;的日志库。&lt;/p&gt;

&lt;h2 id=&quot;创建oss&quot;&gt;创建OSS&lt;/h2&gt;
&lt;p&gt;热更新的代码需要存放在OSS中，所以需要创建一个与函数服务在同一个区存储空间。名字为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotpatch&lt;/code&gt;, 且读写权限为‘公共读，私有写’。&lt;/p&gt;

&lt;h2 id=&quot;创建函数服务&quot;&gt;创建函数服务&lt;/h2&gt;
&lt;p&gt;在阿里控制台选择函数服务，创建名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotpatchService&lt;/code&gt;的函数服务，选择刚创建的日志库&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotpatch&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fc-oss-log-op&lt;/code&gt;这个角色。
&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1fo80vw9gq9j30j00iujtb.jpg&quot; alt=&quot;创建函数服务&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;创建项目&quot;&gt;创建项目&lt;/h2&gt;
&lt;p&gt;函数服务本身每一个函数都是独立的代码片段处理业务的某一个部分，自身就像一个小的项目。但是，一个服务下的所有函数，却是在处理同一块业务。&lt;/p&gt;

&lt;p&gt;热更新项目的结构，借鉴了一些开源项目包含多个子项目的代码管理思路，把服务作为一个项目，每一个函数作为子项目。达到，服务的所有函数代码使用同一个代码库管理，但每个函数的代码又是独立的可以自行管理依赖，测试，发布等操作。&lt;/p&gt;

&lt;p&gt;因为采用nodejs开发，所以使用&lt;a href=&quot;https://lernajs.io&quot;&gt;lerna&lt;/a&gt;作为管理项目和子项目的工具。项目目录如下：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── README.md
├── lerna.json
├── package.json
├── packages
│   ├── getLatestBundle
│   │   ├── index.js
│   │   └── package.json
│   └── uploadBundle
│       ├── index.js
│       ├── node_modules
│       ├── package-lock.json
│       └── package.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;packages&lt;/code&gt;目录下存放着不同的函数，每个函数是一个文件夹, 使用函数名字命名，例如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uploadBundle&lt;/code&gt;。没个函数使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;管理依赖包。&lt;/p&gt;

&lt;h2 id=&quot;上传uploadbundle代码&quot;&gt;上传UploadBundle代码&lt;/h2&gt;
&lt;p&gt;在uploadBunde目录下运行&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fcli shell
mkf uploadBundle &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; index.handler &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nodejs6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;上传getlatestbundle代码&quot;&gt;上传getLatestBundle代码&lt;/h2&gt;
&lt;p&gt;上传getLatestBundle代码&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fcli shell
mkf getLatestBundle &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; index.handler &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nodejs6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;更新代码&quot;&gt;更新代码&lt;/h2&gt;
&lt;p&gt;使用编辑器编辑本地代码后，在函数文件夹运行&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fcli shell
upf &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FUNCTION NAME] &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; index.handler &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nodejs6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;创建触发器&quot;&gt;创建触发器&lt;/h2&gt;
&lt;p&gt;目前只有OSS对象存储服务，支持创建函数触发器，用户可以定义当存储空间内某些操作执行后触发函数，例如用户上传新的对象后，触发函数。&lt;/p&gt;

&lt;p&gt;在热更新后台中，需要在有新代码上传后，对代码进行md5计算，并放入测试环境。&lt;/p&gt;

&lt;p&gt;创建触发器config.yaml, 定义OSS触发函数的事件&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;triggerConfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;oss:ObjectCreated:*&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在bash中运行：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkt uploadBundle &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; oss &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; acs:ram::[ALIYUN ACCOUNT &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:role/fc-invoke-function &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; acs:oss:[REGION]:[ALIYUN ACCOUNT ID]:hotpatch &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;api网关-1&quot;&gt;API网关&lt;/h2&gt;
&lt;p&gt;当使用函数计算作为Web API服务后端时，需要使用API网关来定义Web API的接口，并由API网关转换客户端请求后，调用函数计算服务。&lt;/p&gt;

&lt;p&gt;在更新后台中，检测版本更新需要以Web API的形式提供给APP客户端访问。&lt;/p&gt;

&lt;h3 id=&quot;步骤&quot;&gt;步骤：&lt;/h3&gt;
&lt;h4 id=&quot;在阿里云控制台中打开api网关创建名为hotpatchapigroup的分组&quot;&gt;在阿里云控制台中打开&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API网关&lt;/code&gt;，创建名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotpatchAPIGroup&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;分组&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fo95v5dsrnj31080kg40i.jpg&quot; alt=&quot;创建分组&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;创建名为getlatestbundle的api&quot;&gt;创建名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getLatestBundle&lt;/code&gt;的API&lt;/h4&gt;
&lt;p&gt;安全方式暂时选则&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;无认证&lt;/code&gt;，在后面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;安全&lt;/code&gt;章节中会介绍如何开启认证。&lt;/p&gt;

&lt;p&gt;创建API
&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1fo96d1kcnzj30wc0tcadh.jpg&quot; alt=&quot;创建API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;请求基础定义
&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1fo96fmi1iuj30qa0qujui.jpg&quot; alt=&quot;请求基础定义&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后端基础定义
&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fo96mpy5f2j30py0oxq6j.jpg&quot; alt=&quot;后端基础定义&quot; /&gt;&lt;/p&gt;

&lt;p&gt;定义返回结果&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;isBase64Encoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;httpStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;注：更详细步骤可参考&lt;a href=&quot;https://help.aliyun.com/document_detail/66672.html&quot;&gt;API网关触发函数计算&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;安全&quot;&gt;安全&lt;/h1&gt;
&lt;p&gt;在之前创建API时，选择了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;无认证&lt;/code&gt;，在学习使用函数计算作为API服务后端时是可以简化概念，把重点放在如何链接两个服务上。 在真实项目中，我们依然希望API的访问是可控的，只有授权过的客户端才可以访问。&lt;/p&gt;

&lt;p&gt;API网关服务提供了一种基于应用的认证授权的机制，用户可以在API网关中创建一个应用，并在API中设置安全方式为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;阿里云APP&lt;/code&gt;, 签名算法为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HmacSHA256&lt;/code&gt;。 之后，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;授权信息&lt;/code&gt;中添加应用访问API的授权。&lt;/p&gt;

&lt;p&gt;注：详细步骤可参考&lt;a href=&quot;https://help.aliyun.com/document_detail/29497.html&quot;&gt;授权给应用&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;后记&quot;&gt;后记&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;热更新后&lt;/code&gt;端作为技术验证项目，已经部署在测试环境，生产环境暂时没有开启。&lt;/p&gt;

&lt;p&gt;目前，还有几处不完善的地方：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;发布函数&lt;/li&gt;
  &lt;li&gt;客户端命令行&lt;/li&gt;
  &lt;li&gt;针对不同版本做diff patch，使更新包更小。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;公开项目代码&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;附录&quot;&gt;附录&lt;/h1&gt;
&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.aliyun.com/document_detail/51783.html&quot;&gt;函数服务开发手册&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.aliyun.com/document_detail/54788.html&quot;&gt;以函数计算作为 API 网关后端服务&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 11 Feb 2018 16:58:11 +0800</pubDate>
        <link>http://frankwang.cn/post/2018/02/11/aliyun-fc-RN-hotpatch-backend.html</link>
        <guid isPermaLink="true">http://frankwang.cn/post/2018/02/11/aliyun-fc-RN-hotpatch-backend.html</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Redux Saga实践</title>
        <description>&lt;h1 id=&quot;redux-saga-实践&quot;&gt;Redux Saga 实践&lt;/h1&gt;
&lt;p&gt;本文用以记录从调研Redux Saga，到应用到项目中的一些收获。&lt;/p&gt;

&lt;h1 id=&quot;什么是redux-saga&quot;&gt;什么是Redux Saga&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;官网解释&lt;/code&gt; 来自：&lt;a href=&quot;https://github.com/redux-saga/redux-saga&quot;&gt;https://github.com/redux-saga/redux-saga&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redux-saga&lt;/code&gt; is a library that aims to make side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The mental model is that a saga is like a separate thread in your application that’s solely responsible for side effects. redux-saga is a redux middleware, which means this thread can be started, paused and cancelled from the main application with normal redux actions, it has access to the full redux application state and it can dispatch redux actions as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;刚开始了解Saga时，看官方解释，并不是很清楚到底是什么？Saga的副作用(side effects)到底是什么?&lt;/p&gt;

&lt;p&gt;通读了&lt;a href=&quot;https://github.com/redux-saga/redux-saga&quot;&gt;官方文档&lt;/a&gt;后，大概了解到，副作用就是在action触发reduser之后执行的一些动作， 这些动作包括但不限于，连接网络，io读写，触发其他action。并且，因为Sage的副作用是通过redux的action触发的，每一个action，sage都会像reduser一样接收到。并且通过触发不同的action, 我们可以控制这些副作用的状态， 例如，启动，停止，取消。&lt;/p&gt;

&lt;p&gt;所以，我们可以理解为Sage是一个可以用来处理复杂的异步逻辑的模块，并且由redux的action触发。&lt;/p&gt;

&lt;h1 id=&quot;使用saga解决的问题&quot;&gt;使用Saga解决的问题&lt;/h1&gt;
&lt;p&gt;最初，在开始探究Saga之前，我们是希望寻求一种方式来隔离开应用前端的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;展现层&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;业务层&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;数据层&lt;/code&gt;。 大概想法是使用react展现数据，redux管理数据，然后借助redux的middleware来实现业务层。这样原有的react为核心的项目架构，变成了redux为核心的架构。&lt;/p&gt;

&lt;p&gt;在最初的调研中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redux-thunk&lt;/code&gt;是首先考虑的，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redux-thunk&lt;/code&gt;是在action作用到reducer之前触发一些业务操作。刚好起到控制层的作用。&lt;/p&gt;

&lt;p&gt;但是，马上了解到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redux-sage&lt;/code&gt;，因为大家都在对比两者。本文并不会做对比，在文章的最后会简单介绍为什么选了Saga而不是thunk的原因，仅供参考。&lt;/p&gt;

&lt;p&gt;在浏览了很多比较文章后，最终，我们选择了redux-saga来处理应用的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;控制层&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面是一个简单的例子：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;在用户提交表单的时候，我们想要做如下事情：&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;校验一些输入信息 (简单， 写在组件里)&lt;/li&gt;
    &lt;li&gt;弹起提示信息（聪明的我，一定要写一个公用的提示信息模块，这样别的页面引入就可以用了， 呵呵呵呵。。。）&lt;/li&gt;
    &lt;li&gt;提交后端服务 （直接组件里面fetch吧。。。）&lt;/li&gt;
    &lt;li&gt;拿到后端返回状态 （promise so easy…）&lt;/li&gt;
    &lt;li&gt;隐藏提示信息 (这个有点难度，不过难不倒我，我给组建加一个控制属性)&lt;/li&gt;
    &lt;li&gt;更新redux store （dispatch咯。。。）&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;好了，现在我们要把刚刚做的事情加到所有的表单上。。。 （WTF, 每个form组件都要做同样的事情。。。页面的代码丑的不想再多看一眼。。。）&lt;/p&gt;

&lt;p&gt;用了redux-saga之后：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;form组件触发提交action (一行简单的dispatch)&lt;/li&gt;
  &lt;li&gt;reducer这个action不需要我处理 （打酱油了）&lt;/li&gt;
  &lt;li&gt;saga提交表单的副作用走起～ （监听到触发副作用的action）
    &lt;ul&gt;
      &lt;li&gt;校验一下&lt;/li&gt;
      &lt;li&gt;通知&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;显示层&lt;/code&gt;弹起信息框 （dispatch一下变更控制信息框弹起的store）&lt;/li&gt;
      &lt;li&gt;提交表单 (yield一个promis，yield是javascript generator的语法，稍后有介绍)&lt;/li&gt;
      &lt;li&gt;拿到后端返回状态&lt;/li&gt;
      &lt;li&gt;更新redux store (dispatch一下)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/yanqiw/yanqiw.github.io/raw/master/img/redux-saga-01.jpg&quot; alt=&quot;redux-saga 在项目中的结构&quot; /&gt;
可以看到在使用了Saga后，react只负责数据如何展示，redux来负责数据的状态和绑定数据到react，而Saga处理了大部分复杂的业务逻辑。&lt;/p&gt;

&lt;p&gt;通过这个改变，前端应用的代码结构更加清晰，业务层可复用的部分增加。当然，Saga对自动化测试也支持的很好，可以将逻辑单独使用自动化脚本测试，提高项目质量。&lt;/p&gt;

&lt;h1 id=&quot;开始前需要了解的几个概念&quot;&gt;开始前需要了解的几个概念&lt;/h1&gt;

&lt;h2 id=&quot;redux中间件&quot;&gt;redux中间件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://cn.redux.js.org/&quot;&gt;redux中文文档&lt;/a&gt;解释如下：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果你使用过 Express 或者 Koa 等服务端框架, 那么应该对 middleware 的概念不会陌生。 在这类框架中，middleware 是指可以被嵌入在框架接收请求到产生响应过程之中的代码。例如，Express 或者 Koa 的 middleware 可以完成添加 CORS headers、记录日志、内容压缩等工作。middleware 最优秀的特性就是可以被链式组合。你可以在一个项目中使用多个独立的第三方 middleware。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;相对于 Express 或者 Koa 的 middleware，Redux middleware 被用于解决不同的问题，但其中的概念是类似的。它提供的是位于 action 被发起之后，到达 reducer 之前的扩展点。 你可以利用 Redux middleware 来进行日志记录、创建崩溃报告、调用异步接口或者路由等等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以简单理解为，中间件是可以在action到达reducer之前做一些事情的层。（有意思的是，saga应该是在reducer被触发之后才触发的。TODO, 需要进一步验证）&lt;/p&gt;

&lt;h2 id=&quot;javascript-generator&quot;&gt;Javascript Generator&lt;/h2&gt;
&lt;p&gt;在使用Saga之前，建议先了解Javascript生成器，因为Saga的副作用都是通过生成器来实现的。&lt;/p&gt;

&lt;p&gt;可以在阮一峰的&lt;a href=&quot;http://es6.ruanyifeng.com/&quot;&gt;ECMAScript 6 入门&lt;/a&gt;: &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/generator&quot;&gt;Generator 函数的语法&lt;/a&gt;和&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/generator-async&quot;&gt;Generator 函数的异步应用&lt;/a&gt;章节中了解更多细节。&lt;/p&gt;

&lt;h1 id=&quot;如何使用&quot;&gt;如何使用&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/redux-saga/redux-saga&quot;&gt;redux-sage官方文档&lt;/a&gt;有很详细的使用说明，这里只做简单的上手说明。&lt;/p&gt;

&lt;h2 id=&quot;安装redux-sage&quot;&gt;安装redux-sage&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; redux-saga
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;给redux添加中间件&quot;&gt;给redux添加中间件&lt;/h2&gt;
&lt;p&gt;在定义生成store的地方，引入并加入redux-sage中间件。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyMiddleware&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;redux&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSagaMiddleware&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;redux-saga&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./reducers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mySaga&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./sagas&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// create the saga middleware&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sagaMiddleware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSagaMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// mount it on the Store&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sagaMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// then run the saga&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sagaMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mySaga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;副作用&quot;&gt;副作用&lt;/h2&gt;
&lt;p&gt;副作用，顾名思义，在主要作用（action触发reducer）之外，用来处理其他业务逻辑。redux-saga提供了几种产生副作用的方式, 主要用到了有两种&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeEvery&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeLates&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeEvery&lt;/code&gt;会在接到相应的action之后不断产生新的副作用。 比如，做一个计数器按钮，用户需要不断的点击按钮，对后台数据更新，这里可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeEvery&lt;/code&gt;来触发。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeLatest&lt;/code&gt;在相同的action被触发多次的时候，之前的副作用如果没有执行完，会被取消掉，只有最后一次action触发的副作用可以执行完。比如，我们需要一个刷新按钮， 让用户可以手动的从后台刷新数据， 当用户不停单机刷新的时候， 应该最新一次的请求数据被刷新在页面上，这里可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeLatest&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;redux-saga/effects&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;takeEvery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;redux-saga&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;FETCH_SUCCEEDED&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;FETCH_FAILED&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;watchFetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;takeEvery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;FETCH_REQUESTED&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeEvery&lt;/code&gt;第一个参数可以是数组或者方法。 也可以有第三个参数用来传递变量给方法。&lt;/p&gt;

&lt;h2 id=&quot;call方法&quot;&gt;call方法&lt;/h2&gt;
&lt;p&gt;call有些类似Javascript中的call函数， 不同的是它可以接受一个返回promise的函数，使用生成器的方式来把异步变同步。&lt;/p&gt;

&lt;h2 id=&quot;put方法&quot;&gt;put方法&lt;/h2&gt;
&lt;p&gt;put就是redux的dispatch，用来触发reducer更新store&lt;/p&gt;

&lt;h1 id=&quot;有什么弊端&quot;&gt;有什么弊端&lt;/h1&gt;
&lt;p&gt;目前在项目实践中遇到的一些问题：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;redux-saga模型的理解和学习需要投入很多精力&lt;/li&gt;
  &lt;li&gt;因为需要用action触发，所以会产生很多对于reducer无用的action, 但是reducer一样会跑一轮，虽然目前没有观测到性能下降，但还是有计算开销&lt;/li&gt;
  &lt;li&gt;在action的定义上要谨慎，避免action在saga和reducer之间重复触发，造成死循环&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;后记&quot;&gt;后记&lt;/h1&gt;
&lt;p&gt;总体而言，对于redux-saga的第一次尝试还是很满意的。 在业务逻辑层，可以简化代码，使代码更加容易阅读。 在重用方面，解耦显示层和业务层之后， 代码的重用度也得到了提升。&lt;/p&gt;

&lt;h2 id=&quot;选择saga的原因&quot;&gt;选择Saga的原因&lt;/h2&gt;
&lt;p&gt;开始的时候一直在犹豫是否需要使用Saga或thunk，因为并不能很好的把握这两者到底解决了什么问题。之后，在浏览文章的时候看到了&lt;a href=&quot;http://blog.isquaredsoftware.com/2017/01/idiomatic-redux-thoughts-on-thunks-sagas-abstraction-and-reusability/&quot;&gt;一遍对比两者的长文&lt;/a&gt;，列出了不少开发者对两者的担忧和争论，其中不乏闪光的观点，长文的最后作者写到：“不管是否用得上，你都应该尝试一下”。 这句话使我决定了尝试用saga或thunk来实践把前端分层的设想。&lt;/p&gt;

&lt;p&gt;之所以最后选择了saga是因为这段 Cheng Lou 的视频：
&lt;a href=&quot;https://www.youtube.com/watch?v=mVVNJKv9esE&quot;&gt;On the Spectrum of Abstraction&lt;/a&gt; (youtube)&lt;/p&gt;

&lt;p&gt;视频中讲述了在一种抽象的概念下如何去选择一种技术。 其中一个理论是：越是用来解决具体问题的技术，使用起来越容易，越高效，学习成本越低；越是用来解决宽泛问题的技术，使用起来越难，学习成本越高。 thunk解决的是很具体的一个问题，就是在action到达reducer之前做一些其他的业务，比如fetch后端, 它在做这件事的上很高效。而Saga解决的问题要更宽泛一些，因为saga只是拦截了action，至于做什么，开发者需要自己来考虑，可以是fetch后端，也可以是更新redux store, 甚至可以执行action带进来的callback。 很显然对于一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;业务层&lt;/code&gt;来说,saga会是一个更合适的选择，但同时也带来了学习成本的提高。&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 17:03:51 +0800</pubDate>
        <link>http://frankwang.cn/react/2017/03/05/redux-saga.html</link>
        <guid isPermaLink="true">http://frankwang.cn/react/2017/03/05/redux-saga.html</guid>
        
        
        <category>react</category>
        
      </item>
    
      <item>
        <title>React Native 0.27.x adopt to xcode 8</title>
        <description>&lt;h1 id=&quot;react-native-0270-adopt-to-xcode-8&quot;&gt;React Native 0.27.0 adopt to xcode 8&lt;/h1&gt;

&lt;h1 id=&quot;rctsrwebsocketm-error&quot;&gt;RCTSRWEBSOCKET.M error&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ignoring return value of function declared with warn_unused_result attribute&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Find line&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecRandomCopyBytes(kSecRandomDefault, sizeof(uint32_t), (uint8_t *)mask_key);&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Change to&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(void)SecRandomCopyBytes(kSecRandomDefault, sizeof(uint32_t), (uint8_t *)mask_key);&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Find line&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecRandomCopyBytes(kSecRandomDefault, keyBytes.length, keyBytes.mutableBytes);&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Change to&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(void)SecRandomCopyBytes(kSecRandomDefault, keyBytes.length, keyBytes.mutableBytes);&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;rctscrollviewm-error&quot;&gt;RCTSCROLLVIEW.M error&lt;/h1&gt;

&lt;p&gt;refer to &lt;a href=&quot;https://github.com/facebook/react-native/commit/7c8b91442b3547cf94c752f234210bef0848c00a&quot;&gt;#7c8b914&lt;/a&gt; to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules/react-native/React/Views/RCTScrollView.m&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Then find below code in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCTScrollView.m&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (NSArray&amp;lt;UIView *&amp;gt; *)reactSubviews
{
  if (_contentView &amp;amp;&amp;amp; _scrollView.refreshControl) {
    return @[_contentView, _scrollView.refreshControl];
  }
return _contentView ? @[_contentView] : @[];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;change to&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (NSArray&amp;lt;UIView *&amp;gt; *)reactSubviews
{
  if (_contentView &amp;amp;&amp;amp; _scrollView.rctRefreshControl) {
    return @[_contentView, _scrollView.rctRefreshControl];
  }
  return _contentView ? @[_contentView] : @[];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/yanqiw/5478681bb8eb1a7037f7a5b904a83f5e&quot;&gt;Example of the changed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCTScrollView.m&lt;/code&gt; in Gist&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Oct 2016 14:23:40 +0800</pubDate>
        <link>http://frankwang.cn/2016/10/05/react-native-adopt-to-xcode8.html</link>
        <guid isPermaLink="true">http://frankwang.cn/2016/10/05/react-native-adopt-to-xcode8.html</guid>
        
        
      </item>
    
      <item>
        <title>React Native入门总结</title>
        <description>&lt;h1 id=&quot;react-native入门总结&quot;&gt;React Native入门总结&lt;/h1&gt;
&lt;p&gt;用Javascript, HTML, CSS开发APP已经被谈论了很多年了，在&lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt;之前， &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;一直是首选， 在Cordova的基础上有很多优秀的框架，但是WebView的性能始终是纯H5技术的APP无法跨越的沟， 在用户体验至上的今天，性能问题变得尤为重要。 React Native通过编译将web的组件转换成native的组件，很大的提升了APP的性能。 目前，React Native支持Android和iOS两大主流平台，并被应用在很多知名项目中。&lt;/p&gt;

&lt;p&gt;下面是cordova和React Native的架构图，可以很容易看出两者的不同之处：&lt;/p&gt;

&lt;h2 id=&quot;cordova架构&quot;&gt;Cordova架构&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cordova.apache.org/docs/en/latest/guide/overview/index.html&quot;&gt;图片来自Cordova官网&lt;/a&gt;
&lt;img src=&quot;https://cordova.apache.org/static/img/guide/cordovaapparchitecture.png&quot; alt=&quot;Cordova架构&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;react-native架构&quot;&gt;React Native架构&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/mo-bluemix-react-native-ios8/&quot;&gt;图片来自React Native: Into a new world of rapid iOS development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.ibm.com/developerworks/library/mo-bluemix-react-native-ios8/Figure1.png&quot; alt=&quot;React Native架构&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;准备工作&quot;&gt;准备工作&lt;/h1&gt;
&lt;p&gt;再开始React Native之前，需要准备安装：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Node&lt;/li&gt;
  &lt;li&gt;Android SKD (for android)&lt;/li&gt;
  &lt;li&gt;Xcode (for iOS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;开发用具&quot;&gt;开发用具:&lt;/h2&gt;
&lt;p&gt;因为开发React Native用到的是Javascript，所以可选择的空间很大，首推的还是&lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;JetBrains&lt;/a&gt;家的&lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;， 如果觉得太重GitHub家的&lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;也是不错的选择，加上Facebook新推出的插件&lt;a href=&quot;http://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt;也是很强大的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：在Windows上面有时候Atom会占用大量CPU资源，导致笔记本发热严重. 建议在windows上使用&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime&lt;/a&gt;编辑器。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Android开发推荐&lt;a href=&quot;http://developer.android.com/intl/zh-cn/tools/studio/index.html&quot;&gt;Android Studio&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;iOS开发没得选，直接从App Store下载xCode。&lt;/p&gt;

&lt;h2 id=&quot;安装react-native&quot;&gt;安装React Native&lt;/h2&gt;
&lt;p&gt;下面步骤基于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mac OS X&lt;/code&gt;系统。 对于其他操作系统，你可以参考&lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started.html&quot;&gt;React Native官网&lt;/a&gt;安装&lt;/p&gt;

&lt;h3 id=&quot;安装node&quot;&gt;安装Node&lt;/h3&gt;
&lt;h4 id=&quot;安装homebrew&quot;&gt;安装Homebrew&lt;/h4&gt;
&lt;p&gt;在Mac上使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew&lt;/code&gt;安装nodejs是非常方便的， 如果你已经有了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Homebrew&lt;/code&gt;可以直接跳过这步。
打开Terminal运行：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/bin/ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;安装node-1&quot;&gt;安装Node&lt;/h4&gt;
&lt;p&gt;React Native需要4.0以上的版本。Homebrew会安装最新的6.0版本。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; react-native-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装android-studio&quot;&gt;安装Android Studio&lt;/h3&gt;
&lt;p&gt;在android stuido官网下载安装包并安装。安装后，需要下载SKD。选择：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Android Studio &amp;gt; Preference &amp;gt; System Settings &amp;gt; Android SDK&lt;/code&gt;中选择相应的android版本的SKD。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;建议使用5.0以上的Android版本用于开发和调试，稳定性会远高于4.0+版本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;设置&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANDROID_HOME&lt;/code&gt;环境变量，这部很重要，如果稍后React Native运行不了，多半是这里设置的不正确。
打开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;, 如果没有运行&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; ~/.bashrc &lt;span class=&quot;c&quot;&gt;# or ~/.bash_profile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在文件中输入下面命令：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 如果SDK不是通过android studio安装的， 那么它可能在以下路径:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /usr/local/opt/android-sdk&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ANDROID_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/Library/Android/sdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装watchman&quot;&gt;安装Watchman&lt;/h3&gt;
&lt;p&gt;建议安装Watchman来监控文件夹变化, 自动触发一些事件&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;watchman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装genymotion&quot;&gt;安装Genymotion&lt;/h3&gt;
&lt;p&gt;强烈推荐的模拟器，可以方便的安装不同型号的Android手机模拟器。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在&lt;a href=&quot;https://www.genymotion.com/&quot;&gt;Genymotion&lt;/a&gt;官网注册账号&lt;/li&gt;
  &lt;li&gt;登陆后在&lt;a href=&quot;https://www.genymotion.com/download/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;下载页面&lt;/code&gt;&lt;/a&gt;下载安装包&lt;/li&gt;
  &lt;li&gt;根据说明安装&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;创建项目&quot;&gt;创建项目&lt;/h1&gt;
&lt;p&gt;创建一个React Native项目很简单，至于要一行命令：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native init AwesomeProject
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;AwesomeProject
npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;运行android项目&quot;&gt;运行Android项目&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;运行一个Genymotion的虚拟机&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AwesomeProject&lt;/code&gt;文件夹下运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-native run-android&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;刚刚初始化的项目会被编译并安装在虚拟机中， 在编辑器中打开&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AwesomeProject&lt;/code&gt;文件夹，就可以进行开发项目了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一次启动时会下载依赖包，需要耐心等待很久。 根据网络情况，你可能需要设置代理才能完成下载。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;运行ios项目&quot;&gt;运行iOS项目&lt;/h2&gt;
&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AwesomeProject&lt;/code&gt;文件夹下运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-native run-ios&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;第一枪&quot;&gt;第一枪&lt;/h1&gt;
&lt;p&gt;在虚拟设备上运行的时候，一切会很顺利，但是第一次将项目放到真实android设备中运行时，大多数人都会中上React Native的第一枪－&lt;a href=&quot;https://github.com/facebook/react-native/issues/4952&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Can't find variable: _fbBatchedBridge&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/587438/11986090/a1a814d6-a999-11e5-8120-82a6391d0531.png&quot; alt=&quot;Can't find variable: _fbBatchedBridge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有时也可能是一个大白页面。&lt;/p&gt;

&lt;p&gt;解决办法也很简单，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dev setting&lt;/code&gt;里面设置&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;电脑的IP:8081&lt;/code&gt;，再刷新就可以解决。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;很多国内定制版的android系统不能通过menu键调出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dev setting&lt;/code&gt;。 这时需要在手机的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;设置-&amp;gt;应用-&amp;gt;[项目app]-&amp;gt;权限管理&lt;/code&gt;中启动&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;显示悬浮窗口。 &lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;修改项目&quot;&gt;修改项目&lt;/h1&gt;
&lt;h2 id=&quot;android&quot;&gt;Android&lt;/h2&gt;
&lt;p&gt;使用之前介绍人任何一款编辑器打开&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AwesomeProject&lt;/code&gt;中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.android.js&lt;/code&gt;,并加入自己的代码，开始你的项目。&lt;/p&gt;

&lt;h2 id=&quot;ios&quot;&gt;iOS&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.ios.js&lt;/code&gt;是iOS的入口文件，可以参考&lt;a href=&quot;http://reactnative.cn/&quot;&gt;React Native官方网站&lt;/a&gt;进行项目开发，这里不过多介绍。&lt;/p&gt;

&lt;h1 id=&quot;调试&quot;&gt;调试&lt;/h1&gt;
&lt;h2 id=&quot;在android模拟器上调试&quot;&gt;在Android模拟器上调试&lt;/h2&gt;
&lt;p&gt;运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genymontion&lt;/code&gt;选择一个模拟器运行。在项目路径运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-native run-android&lt;/code&gt;。项目启动后，可以通过菜单模拟键调出开发者菜单，选择reload javascript来刷新修改后的代码。也可以开启调.试模式。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;开启调试模式的时候会弹出浏览器，这里需要手动打开&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;开发者工具&lt;/code&gt;才能看到控制台和调试&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;在android设备上调试&quot;&gt;在Android设备上调试&lt;/h2&gt;
&lt;p&gt;在Android设备上打开调试模式， 并将设备通过数据线连接到电脑上运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-native run-android&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;请关闭其他android虚拟机，以避免安装应用到设备时出现错误。如果设备上启动应用后白屏，请参考&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;第一枪&lt;/code&gt;这一段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;发布&quot;&gt;发布&lt;/h1&gt;
&lt;p&gt;待续&lt;/p&gt;

&lt;h1 id=&quot;后续反思&quot;&gt;后续反思&lt;/h1&gt;
&lt;p&gt;待续&lt;/p&gt;
</description>
        <pubDate>Thu, 12 May 2016 15:03:57 +0800</pubDate>
        <link>http://frankwang.cn/2016/05/12/react-native-guide.html</link>
        <guid isPermaLink="true">http://frankwang.cn/2016/05/12/react-native-guide.html</guid>
        
        
      </item>
    
      <item>
        <title>使用docker创建ReactJS开发环境，实时编译JSX</title>
        <description>&lt;h2 id=&quot;为什么要使用docker来创建reactjs开发环境&quot;&gt;为什么要使用docker来创建ReactJS开发环境&lt;/h2&gt;

&lt;p&gt;刚刚开始学习ReactJS的时候，折腾了很久才搭建起开发环境。所以，我就开始尝试将ReactJS的编译环境打包在docker中，并使用gulp来动态编译。后来一直在使用这个docker镜像，来帮助我开发ReactJS应用。&lt;/p&gt;

&lt;h2 id=&quot;使用到的技术&quot;&gt;使用到的技术&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;docker&lt;/li&gt;
  &lt;li&gt;gulp&lt;/li&gt;
  &lt;li&gt;browserify&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;创建镜像&quot;&gt;创建镜像&lt;/h2&gt;
&lt;p&gt;首先，要根据自己的需要创建一个reactJS编译环境的镜像。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;s&quot;&gt;FROM node&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;RUN mkdir /runtime&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;WORKDIR /runtime&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;RUN npm init -y&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#install gulp for auto build&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN npm install --save-dev gulp gulp-uglify;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN npm install --save-dev del;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN npm install --save-dev vinyl-source-stream;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN npm install --save-dev browserify;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN npm install --save-dev reactify;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN npm install --save-dev react react-dom;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;#install react and build tool&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#RUN npm install -g browserify&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#RUN npm install --save-dev react react-dom babelify babel-preset-react&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#add gulpfile&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ADD . /runtime&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;CMD [&quot;bash&quot;, &quot;run.sh&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;用来定义gulp要做的事情。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gulpfile.js&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* gulpfile.js */&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Load some modules which are installed through NPM.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browserify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;browserify&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Bundles JS.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Deletes files.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;reactify&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Transforms React JSX to JS.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vinyl-source-stream&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// Define some paths.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app_js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./src/js/app.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./src/js/*.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// An example of a dependency task, it will be run before the css/js tasks.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Dependency tasks should call the callback to tell the parent task that&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// they're done.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// Our JS task. It will Browserify our code and compile React JSX files.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Browserify/bundle the JS.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;trigger browserify&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;browserify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app_js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reactify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bundle.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./src/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;called&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Rerun tasks whenever a file changes.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;called&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The default task (called when we run `gulp` from cli)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run.sh&lt;/code&gt;用启动gulp脚本，对本地文件进行监视，一旦有文件改动，立即执行编译。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;run.sh&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/bash&lt;/span&gt;
./node_modules/gulp/bin/gulp.js&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;镜像构建&quot;&gt;镜像构建&lt;/h2&gt;

&lt;p&gt;将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run.sh&lt;/code&gt;三个文件放在同一目录下。 运行&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build -t reactjs-builder-runtime .&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;运行&quot;&gt;运行&lt;/h2&gt;

&lt;p&gt;在项目静态文件夹中运行，请将ReactJS项目入口文件名设置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.js&lt;/code&gt;。 如果项目的入口文件不是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.js&lt;/code&gt;,可以修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;中的路径设置。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run --name project-name-reactjs-builder -v &quot;$PWD&quot;:/runtime/src -d reactjs-builder-runtime&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看日志：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker logs -f project-name-reactjs-builder&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;代码和镜像托管&quot;&gt;代码和镜像托管&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;项目代码托管在&lt;a href=&quot;https://github.com/yanqiw/reactjs-builder-runtime&quot;&gt;yanqiw/reactjs-builder-runtime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;镜像托管在&lt;a href=&quot;https://hub.docker.com/r/yanqiw/reactjs-builder-runtime/&quot;&gt;react-runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;TBD&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 05 Mar 2016 08:33:00 +0800</pubDate>
        <link>http://frankwang.cn/docker/2016/03/05/use-docker-build-reactjs.html</link>
        <guid isPermaLink="true">http://frankwang.cn/docker/2016/03/05/use-docker-build-reactjs.html</guid>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>在docker container中启动定时任务</title>
        <description>&lt;h2 id=&quot;设置cron&quot;&gt;设置cron&lt;/h2&gt;

&lt;p&gt;在Linux中定时任务一般使用cron，ubuntu的官方镜像中已经包含了cron，可以直接使用。但是因为cron是后台执行，我们还需要另外一个进程来保持container的运行。 可以通过使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tail -F &lt;/code&gt; ，来检测一些log文件保持进程，也可以在container启动的时候设置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-restart alwasy&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面是以ubuntu为例的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ubuntu:14.04&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 安装python, 这步可以省略，或添加其他依赖&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; python

&lt;span class=&quot;c&quot;&gt;# 创建脚本路径&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /code
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /code&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 复制要运行的代码到镜像中，包括cron配置文件&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /code&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 设置cron脚本&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;crontab /code/crontabfile

&lt;span class=&quot;c&quot;&gt;# 安装rsyslog&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rsyslog

&lt;span class=&quot;c&quot;&gt;# 复制crontabfile到/etc/crontab&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /code/crontabfile /etc/crontab
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; /var/log/cron.log

&lt;span class=&quot;c&quot;&gt;# 将run.sh设置为可执行&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /code/run.sh

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /code&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;bash&quot;,&quot;/code/run.sh&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;run.sh&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rsyslogd
cron
&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; /var/log/cron.log
&lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; /var/log/syslog /var/log/cron.log&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tail -F /var/log/syslog /var/log/cron.log&lt;/code&gt;这里用来输出系统和cron日志，并保持container运行&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;crontabfile example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;0 23 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;  python /code/run.py cron &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /var/log/cron.log 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python /code/run.py&lt;/code&gt;是要运行的定时任务。关于cron配置，可以参考&lt;a href=&quot;http://linuxtools-rst.readthedocs.org/zh_CN/latest/tool/crontab.html&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;build镜像&quot;&gt;build镜像&lt;/h2&gt;

&lt;p&gt;将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run.sh&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crontabfile&lt;/code&gt; 放在脚本跟目录下，运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build -t your-image-name .&lt;/code&gt;创建镜像。&lt;/p&gt;

&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;

&lt;p&gt;在脚本根目录下创建&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run.py&lt;/code&gt;脚本来测试镜像。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;run.py&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I am running by cron&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;运行&quot;&gt;运行&lt;/h2&gt;

&lt;p&gt;在有docker engining的机器上运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run you-image-name&lt;/code&gt;启动定时任务，也可以根据具体情况添加其他启动参数。&lt;/p&gt;

&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;
&lt;p&gt;文本代码托管在&lt;a href=&quot;https://github.com/yanqiw/cron-in-docker&quot;&gt;yanqiw/cron-in-docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;使用如下代码来快速运行代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/yanqiw/cron-in-docker.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cron-in-docker
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; cron-in-docker &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; cron-in-docker&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;container启动后，在控制台可以看到每分钟输出的”I am running by cron”.&lt;/p&gt;

&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aptible/docker-cron-example&quot;&gt;aptible/docker-cron-example&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Feb 2016 20:59:49 +0800</pubDate>
        <link>http://frankwang.cn/docker/2016/02/21/schedule-task-in-docker.html</link>
        <guid isPermaLink="true">http://frankwang.cn/docker/2016/02/21/schedule-task-in-docker.html</guid>
        
        
        <category>docker</category>
        
      </item>
    
  </channel>
</rss>
